name: Sales Notes Service CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  package:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_SALES_NOTES }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Full ECR image path
          echo "Building and pushing to ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

  deploy:
    needs: package
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Deploy to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_SALES_NOTES }}
          IMAGE_TAG: ${{ github.sha }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          # Write the SSH key to a file
          echo "$EC2_SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem

          # Create deployment script
          cat > deploy.sh << 'EOL'
          #!/bin/bash

          # Set environment variables
          ECR_REGISTRY="${ECR_REGISTRY}"
          ECR_REPOSITORY="${ECR_REPOSITORY}"
          IMAGE_TAG="${IMAGE_TAG}"
          CONTAINER_NAME="sales-notes-service"

          # Check if env file exists, create if it doesn't
          if [ ! -f /home/${EC2_USERNAME}/sales-notes-service.env ]; then
            echo "Creating default environment file"
            cat > /home/${EC2_USERNAME}/sales-notes-service.env << 'ENV_EOF'
          DB_HOST=your-rds-endpoint.region.rds.amazonaws.com
          DB_PORT=5432
          DB_NAME=shared_service_db
          DB_USER=admin
          DB_PASSWORD=your_secure_password
          API_HOST=0.0.0.0
          API_PORT=8001
          PDF_STORAGE_PATH=/tmp/sales_notes_pdfs
          ENV_EOF
          fi

          # Stop and remove the old container if it exists
          docker ps -a | grep -q ${CONTAINER_NAME} && docker stop ${CONTAINER_NAME} || true
          docker ps -a | grep -q ${CONTAINER_NAME} && docker rm ${CONTAINER_NAME} || true

          # Pull the new image
          echo "Pulling ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

          # Create a volume for PDF storage if it doesn't exist
          docker volume ls | grep -q sales-notes-pdfs || docker volume create sales-notes-pdfs

          # Run the new container
          echo "Running new container"
          docker run -d \
            --name ${CONTAINER_NAME} \
            -p 8001:8001 \
            --restart always \
            --env-file /home/${EC2_USERNAME}/sales-notes-service.env \
            -v sales-notes-pdfs:/tmp/sales_notes_pdfs \
            ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

          echo "Deployment complete"
          EOL

          # Replace variables in the script
          sed -i "s|\${ECR_REGISTRY}|$ECR_REGISTRY|g" deploy.sh
          sed -i "s|\${ECR_REPOSITORY}|$ECR_REPOSITORY|g" deploy.sh
          sed -i "s|\${IMAGE_TAG}|$IMAGE_TAG|g" deploy.sh
          sed -i "s|\${EC2_USERNAME}|$EC2_USERNAME|g" deploy.sh

          # Show the deployment script
          echo "Deployment script:"
          cat deploy.sh

          # Copy the deployment script to the EC2 instance
          scp -i ssh_key.pem -o StrictHostKeyChecking=no deploy.sh ${EC2_USERNAME}@${EC2_HOST}:/home/${EC2_USERNAME}/

          # Execute the deployment script
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no ${EC2_USERNAME}@${EC2_HOST} "chmod +x /home/${EC2_USERNAME}/deploy.sh && /home/${EC2_USERNAME}/deploy.sh"

          # Clean up
          rm ssh_key.pem deploy.sh
